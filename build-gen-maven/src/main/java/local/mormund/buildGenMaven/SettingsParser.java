package local.mormund.buildGenMaven;

import static java.util.Map.entry;

import java.util.Map;

class SettingsParser {
  private SettingsParser() {

  }

  public static Map<String, String> parseSourceLines() {
    return Map.ofEntries(
      // === Core Runtime Module ===
      entry("base-asm", "platforms/core-runtime/base-asm"),
      entry("base-services", "platforms/core-runtime/base-services"),
      entry("build-configuration", "platforms/core-runtime/build-configuration"),
      entry("build-operations", "platforms/core-runtime/build-operations"),
      entry("build-operations-trace", "platforms/core-runtime/build-operations-trace"),
      entry("build-option", "platforms/core-runtime/build-option"),
      entry("build-process-services", "platforms/core-runtime/build-process-services"),
      entry("build-profile", "platforms/core-runtime/build-profile"),
      entry("build-state", "platforms/core-runtime/build-state"),
      entry("cli", "platforms/core-runtime/cli"),
      entry("client-services", "platforms/core-runtime/client-services"),
      entry("concurrent", "platforms/core-runtime/concurrent"),
      entry("daemon-main", "platforms/core-runtime/daemon-main"),
      entry("daemon-protocol", "platforms/core-runtime/daemon-protocol"),
      entry("daemon-services", "platforms/core-runtime/daemon-services"),
      entry("daemon-server", "platforms/core-runtime/daemon-server"),
      // entry("distributions-basics", "platforms/core-runtime/distributions-basics"),
      // entry("distributions-core", "platforms/core-runtime/distributions-core"),
      entry("file-temp", "platforms/core-runtime/file-temp"),
      entry("files", "platforms/core-runtime/files"),
      entry("functional", "platforms/core-runtime/functional"),
      entry("gradle-cli-main", "platforms/core-runtime/gradle-cli-main"),
      entry("gradle-cli", "platforms/core-runtime/gradle-cli"),
      entry("installation-beacon", "platforms/core-runtime/installation-beacon"),
      entry("instrumentation-agent", "platforms/core-runtime/instrumentation-agent"),
      entry("instrumentation-agent-services", "platforms/core-runtime/instrumentation-agent-services"),
      entry("instrumentation-declarations", "platforms/core-runtime/instrumentation-declarations"),
      entry("instrumentation-reporting", "platforms/core-runtime/instrumentation-reporting"),
      // entry("internal-instrumentation-api", "platforms/core-runtime/internal-instrumentation-api"),
      entry("internal-instrumentation-processor", "platforms/core-runtime/internal-instrumentation-processor"),
      entry("io", "platforms/core-runtime/io"),
      entry("stdlib-java-extensions", "platforms/core-runtime/stdlib-java-extensions"),
      entry("launcher", "platforms/core-runtime/launcher"),
      entry("logging", "platforms/core-runtime/logging"),
      entry("logging-api", "platforms/core-runtime/logging-api"),
      entry("messaging", "platforms/core-runtime/messaging"),
      entry("native", "platforms/core-runtime/native"),
      entry("process-memory-services", "platforms/core-runtime/process-memory-services"),
      entry("process-services", "platforms/core-runtime/process-services"),
      entry("report-rendering", "platforms/core-runtime/report-rendering"),
      entry("serialization", "platforms/core-runtime/serialization"),
      entry("service-lookup", "platforms/core-runtime/service-lookup"),
      entry("service-provider", "platforms/core-runtime/service-provider"),
      entry("service-registry-builder", "platforms/core-runtime/service-registry-builder"),
      entry("service-registry-impl", "platforms/core-runtime/service-registry-impl"),
      entry("time", "platforms/core-runtime/time"),
      entry("tooling-api-provider", "platforms/core-runtime/tooling-api-provider"),
      entry("wrapper-main", "platforms/core-runtime/wrapper-main"),
      entry("wrapper-shared", "platforms/core-runtime/wrapper-shared"),
      // === Core Configuration Module ===
      entry("api-metadata","platforms/core-configuration/api-metadata"),
      entry("base-services-groovy","platforms/core-configuration/base-services-groovy"),
      entry("bean-serialization-services","platforms/core-configuration/bean-serialization-services"),
      entry("configuration-cache","platforms/core-configuration/configuration-cache"),
      entry("configuration-cache-base","platforms/core-configuration/configuration-cache-base"),
      entry("configuration-problems-base","platforms/core-configuration/configuration-problems-base"),
      entry("core-kotlin-extensions","platforms/core-configuration/core-kotlin-extensions"),
      entry("core-serialization-codecs","platforms/core-configuration/core-serialization-codecs"),
      entry("declarative-dsl-api","platforms/core-configuration/declarative-dsl-api"),
      entry("declarative-dsl-core","platforms/core-configuration/declarative-dsl-core"),
      entry("declarative-dsl-evaluator","platforms/core-configuration/declarative-dsl-evaluator"),
      entry("declarative-dsl-provider","platforms/core-configuration/declarative-dsl-provider"),
      entry("declarative-dsl-tooling-models","platforms/core-configuration/declarative-dsl-tooling-models"),
      entry("declarative-dsl-tooling-builders","platforms/core-configuration/declarative-dsl-tooling-builders"),
      entry("declarative-dsl-internal-utils","platforms/core-configuration/declarative-dsl-internal-utils"),
      entry("dependency-management-serialization-codecs","platforms/core-configuration/dependency-management-serialization-codecs"),
      entry("encryption-services","platforms/core-configuration/encryption-services"),
      entry("file-collections","platforms/core-configuration/file-collections"),
      entry("file-operations","platforms/core-configuration/file-operations"),
      entry("flow-services","platforms/core-configuration/flow-services"),
      entry("graph-serialization","platforms/core-configuration/graph-serialization"),
      entry("guava-serialization-codecs","platforms/core-configuration/guava-serialization-codecs"),
      entry("input-tracking","platforms/core-configuration/input-tracking"),
      entry("kotlin-dsl","platforms/core-configuration/kotlin-dsl"),
      entry("kotlin-dsl-provider-plugins","platforms/core-configuration/kotlin-dsl-provider-plugins"),
      entry("kotlin-dsl-tooling-builders","platforms/core-configuration/kotlin-dsl-tooling-builders"),
      entry("kotlin-dsl-tooling-models","platforms/core-configuration/kotlin-dsl-tooling-models"),
      entry("kotlin-dsl-plugins","platforms/core-configuration/kotlin-dsl-plugins"),
      entry("kotlin-dsl-integ-tests","platforms/core-configuration/kotlin-dsl-integ-tests"),
      entry("stdlib-kotlin-extensions","platforms/core-configuration/stdlib-kotlin-extensions"),
      entry("stdlib-serialization-codecs","platforms/core-configuration/stdlib-serialization-codecs"),
      entry("model-core","platforms/core-configuration/model-core"),
      // entry("model-groovy","platforms/core-configuration/model-groovy"),
      // === Core Execution Module ===
      entry("build-cache","platforms/core-execution/build-cache"),
      entry("build-cache-base","platforms/core-execution/build-cache-base"),
      entry("build-cache-example-client","platforms/core-execution/build-cache-example-client"),
      entry("build-cache-local","platforms/core-execution/build-cache-local"),
      entry("build-cache-http","platforms/core-execution/build-cache-http"),
      entry("build-cache-packaging","platforms/core-execution/build-cache-packaging"),
      entry("build-cache-spi","platforms/core-execution/build-cache-spi"),
      entry("execution-e2e-tests","platforms/core-execution/execution-e2e-tests"),
      entry("file-watching","platforms/core-execution/file-watching"),
      entry("execution","platforms/core-execution/execution"),
      entry("hashing","platforms/core-execution/hashing"),
      entry("persistent-cache","platforms/core-execution/persistent-cache"),
      entry("snapshots","platforms/core-execution/snapshots"),
      entry("worker-main","platforms/core-execution/worker-main"),
      entry("workers","platforms/core-execution/workers"),
      // === Enterprise/Develocity integration projects ===
      entry("enterprise","platforms/enterprise/enterprise"),
      entry("enterprise-logging","platforms/enterprise/enterprise-logging"),
      entry("enterprise-operations","platforms/enterprise/enterprise-operations"),
      entry("enterprise-plugin-performance","platforms/enterprise/enterprise-plugin-performance"),
      entry("enterprise-workers","platforms/enterprise/enterprise-workers"),
      // === IDE projects ===
      entry("base-ide-plugins","platforms/ide/base-ide-plugins"),
      entry("ide","platforms/ide/ide"),
      entry("ide-native","platforms/ide/ide-native"),
      entry("ide-plugins","platforms/ide/ide-plugins"),
      entry("problems","platforms/ide/problems"),
      entry("problems-api","platforms/ide/problems-api"),
      entry("problems-rendering","platforms/ide/problems-rendering"),
      entry("tooling-api","platforms/ide/tooling-api"),
      entry("tooling-api-builders","platforms/ide/tooling-api-builders"),
      // === Software projects ===
      entry("antlr","platforms/software/antlr"),
      entry("build-init","platforms/software/build-init"),
      entry("dependency-management","platforms/software/dependency-management"),
      entry("plugins-distribution","platforms/software/plugins-distribution"),
      // entry("distributions-publishing","platforms/software/distributions-publishing"),
      entry("ivy","platforms/software/ivy"),
      entry("maven","platforms/software/maven"),
      entry("platform-base","platforms/software/platform-base"),
      entry("plugins-version-catalog","platforms/software/plugins-version-catalog"),
      entry("publish","platforms/software/publish"),
      entry("resources","platforms/software/resources"),
      entry("resources-http","platforms/software/resources-http"),
      entry("resources-gcs","platforms/software/resources-gcs"),
      entry("resources-s3","platforms/software/resources-s3"),
      entry("resources-sftp","platforms/software/resources-sftp"),
      entry("reporting","platforms/software/reporting"),
      entry("security","platforms/software/security"),
      entry("signing","platforms/software/signing"),
      entry("testing-base","platforms/software/testing-base"),
      entry("testing-base-infrastructure","platforms/software/testing-base-infrastructure"),
      entry("test-suites-base","platforms/software/test-suites-base"),
      entry("version-control","platforms/software/version-control"),
      // === jvm projects ===
      entry("code-quality","platforms/jvm/code-quality"),
      //entry("distributions-jvm","platforms/jvm/distributions-jvm"),
      entry("ear","platforms/jvm/ear"),
      entry("jacoco","platforms/jvm/jacoco"),
      entry("jvm-services","platforms/jvm/jvm-services"),
      entry("language-groovy","platforms/jvm/language-groovy"),
      entry("language-java","platforms/jvm/language-java"),
      entry("language-jvm","platforms/jvm/language-jvm"),
      entry("toolchains-jvm","platforms/jvm/toolchains-jvm"),
      entry("toolchains-jvm-shared","platforms/jvm/toolchains-jvm-shared"),
      entry("java-compiler-plugin","platforms/jvm/java-compiler-plugin"),
      entry("java-platform","platforms/jvm/java-platform"),
      entry("normalization-java","platforms/jvm/normalization-java"),
      entry("platform-jvm","platforms/jvm/platform-jvm"),
      entry("plugins-application","platforms/jvm/plugins-application"),
      entry("plugins-groovy","platforms/jvm/plugins-groovy"),
      entry("plugins-java","platforms/jvm/plugins-java"),
      entry("plugins-java-base","platforms/jvm/plugins-java-base"),
      entry("plugins-java-library","platforms/jvm/plugins-java-library"),
      entry("plugins-jvm-test-fixtures","platforms/jvm/plugins-jvm-test-fixtures"),
      entry("plugins-jvm-test-suite","platforms/jvm/plugins-jvm-test-suite"),
      entry("plugins-test-report-aggregation","platforms/jvm/plugins-test-report-aggregation"),
      entry("scala","platforms/jvm/scala"),
      entry("testing-jvm","platforms/jvm/testing-jvm"),
      entry("testing-jvm-infrastructure","platforms/jvm/testing-jvm-infrastructure"),
      entry("testing-junit-platform","platforms/jvm/testing-junit-platform"),
      entry("war","platforms/jvm/war"),
      // === Gradle implementation projects ===
      entry("core","subprojects/core"),
      entry("build-events","subprojects/build-events"),
      entry("diagnostics","subprojects/diagnostics"),
      entry("composite-builds","subprojects/composite-builds"),
      entry("core-api","subprojects/core-api"),
      // === Platform extensibility projects ===
      entry("plugin-development","platforms/extensibility/plugin-development"),
      entry("plugin-use","platforms/extensibility/plugin-use"),
      entry("test-kit","platforms/extensibility/test-kit"),
      entry("unit-test-fixtures","platforms/extensibility/unit-test-fixtures"),
      // === Native platform projects ===
      entry("distributions-native", "platforms/native/distributions-native"),
      entry("language-native", "platforms/native/language-native"),
      entry("platform-native", "platforms/native/platform-native"),
      entry("testing-native", "platforms/native/testing-native"),
      entry("tooling-native", "platforms/native/tooling-native")
    );
  }
}